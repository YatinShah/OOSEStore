///////////////////////////////////////////////////////////
//  Transaction.cs
//  Implementation of the Class Transaction
//  Generated by Enterprise Architect
//  Created on:      04-Dec-2023 4:24:26 PM
//  Original author: User
///////////////////////////////////////////////////////////

using OOSEStore.Strategies;
using OOSEStore.Factories;
using OOSEStore.Models;
using OOSEStore.Iterators;
using System.Xml;
namespace OOSEStore
{
    public class Transaction
    {
        private readonly string m_Name;
        public SaleItemsCollection Purchases;
        public CouponsCollection Coupons;
        public PricingFactory m_PricingFactory;
        private CouponFactory m_CouponFactory;
        public decimal m_FinalAmount;

        public decimal FinalAmount { get { return m_FinalAmount; } internal set { m_FinalAmount = value; } }
        public Transaction(string transactionName)
        {
            FinalAmount = 0;
            m_Name = transactionName;
            Purchases = new SaleItemsCollection();
            Coupons = new CouponsCollection();
            m_PricingFactory = new PricingFactory();
            m_CouponFactory = new CouponFactory();
        }

        /// <summary>
        /// 
        /// </summary>
        /// 
        /// <param name="transaction"></param>
        /// <param name="customer"></param>
        /// <param name="item"></param>
        public int CalculatePrice(Transaction transaction, Customer customer, SaleItem item)
        {

            return 0;
        }

        /// <summary>
        /// 
        /// </summary>
        /// 
        /// <param name="item"></param>
        public PricingStrategy GetPricingStrategy(SaleItem item)
        {

            return null;
        }
        /// <summary>
        /// 
        /// </summary>
        /// 
        /// <param name="saleItem"></param>
        /// <param name="customer"></param>
        /// <param name="pricingStrategy"></param>

        internal void AddProduct(SaleItem saleItem, Customer customer, CouponTypes? couponType = null)
        {
            var pricingStrategy = m_PricingFactory.GetPricingStrategy(saleItem);
            var coupon = new CouponFactory().GetCoupon(couponType ?? CouponTypes.NoCoupon, pricingStrategy);
            Console.Write($"Adding Product:{saleItem.GetProductType()}, SaleType: {saleItem.GetSaleType()}, Qty: {saleItem.GetQuantity()}");
            saleItem.SalePrice = coupon.CalculatePrice(this, customer, saleItem);
            Console.WriteLine($" Cost of item:{saleItem.GetCost()}");
            Purchases.Add(saleItem);

            m_FinalAmount += saleItem.GetCost();
        }

        internal void AddCoupon(Customer customer, CouponTypes couponType)
        {
            var coupon = m_CouponFactory.GetCoupon(couponType, new TransactionPricingStrategy());
            Coupons.Add(coupon);
            var discount = coupon.CalculatePrice(this, customer, NullSaleItem.Instance);

            m_FinalAmount -= discount;
        }

        public void ToXml(XmlElement source)
        {
            XmlElement element = source.OwnerDocument.CreateElement("Receipt");
            element.SetAttribute("Name", m_Name);
            element.SetAttribute("TotalAmount", FinalAmount.ToString("C"));
            element.SetAttribute("Date", DateTime.Now.ToString("G"));

            Purchases.ToXml(element);
            Coupons.ToXml(element);
            source.AppendChild(element);
        }

    }//end Transaction

}//end namespace Store