///////////////////////////////////////////////////////////
//  PricingFactory.cs
//  Implementation of the Class PricingFactory
//  Generated by Enterprise Architect
//  Created on:      04-Dec-2023 4:24:25 PM
//  Original author: User
///////////////////////////////////////////////////////////

using OOSEStore.Models;
using OOSEStore.Strategies;



namespace OOSEStore.Factories
{
    public class PricingFactory
    {
        /// <summary>
        /// 
        /// </summary>
        /// 
        /// <param name="item"></param>
        protected PricingFactory GetPricingFactory(SaleItem item)
        {
            var saleType = item.GetSaleType();
            switch (saleType)
            {
                case SaleTypes.Rental: return new RentalPricingFactory();
                case SaleTypes.Sale: return new SalePricingFactory();
                case SaleTypes.Free: return new PriceFreePricingFactory();
                default: throw new ArgumentOutOfRangeException(nameof(saleType));
            }
        }

        /// <summary>
        /// 
        /// </summary>
        /// 
        /// <param name="item"></param>
        public virtual PricingStrategy GetPricingStrategy(SaleItem item)
        {
            var tmpFactory = GetPricingFactory(item);
            return tmpFactory.GetPricingStrategy(item);
        }

    }//end PricingFactory

}//end namespace Store