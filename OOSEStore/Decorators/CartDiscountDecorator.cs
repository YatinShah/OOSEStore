///////////////////////////////////////////////////////////
//  CartDiscount.cs
//  Implementation of the Class CartDiscount
//  Generated by Enterprise Architect
//  Created on:      04-Dec-2023 4:24:24 PM
//  Original author: User
///////////////////////////////////////////////////////////

using System.Xml;

using OOSEStore.Models;
using OOSEStore.Strategies;
namespace OOSEStore.Decorators
{
    public class CartDiscountDecorator : CouponDecorator
    {
        protected const int MINQTYFORDISCOUNT = 10;
        private bool m_discountApplied = false;
        private decimal m_discount = 0m;
        public CartDiscountDecorator(PricingStrategy basePriceStrategy) : base(basePriceStrategy)
        {
            m_BaseValue = 10m;
            IsItemDiscount = false;

        }

        /// <summary>
        /// 
        /// </summary>
        /// 
        /// <param name="transaction"></param>
        /// <param name="customer"></param>
        /// <param name="item"></param>
        /// <param name="unitPrice"></param>
        protected override decimal CalculateDiscount(Transaction transaction, Customer customer, SaleItem item, decimal unitPrice)
        {
            if (transaction.Purchases.Select(p => p.GetSaleType() != SaleTypes.Free).Count() > MINQTYFORDISCOUNT)
            {
                m_discountApplied = true;

                m_discount = transaction.FinalAmount * m_BaseValue / 100;
                return m_discount;
            }
            return 0m;
        }

        public override void ToXml(XmlElement source)
        {
            if (!m_discountApplied) return;
            XmlElement element = source.OwnerDocument.CreateElement("CartDiscount");
            element.SetAttribute("Amount", (-1 * m_discount).ToString());
            source.AppendChild(element);

        }

    }//end CartDiscount

}//end namespace Store